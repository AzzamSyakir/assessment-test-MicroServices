// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: screen.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ScreenService_GetScreenById_FullMethodName = "/assesement_test_MicroServices.ScreenService/GetScreenById"
	ScreenService_UpdateScreen_FullMethodName  = "/assesement_test_MicroServices.ScreenService/UpdateScreen"
	ScreenService_CreateScreen_FullMethodName  = "/assesement_test_MicroServices.ScreenService/CreateScreen"
	ScreenService_DeleteScreen_FullMethodName  = "/assesement_test_MicroServices.ScreenService/DeleteScreen"
	ScreenService_ListScreens_FullMethodName   = "/assesement_test_MicroServices.ScreenService/ListScreens"
)

// ScreenServiceClient is the client API for ScreenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScreenServiceClient interface {
	GetScreenById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ScreenResponse, error)
	UpdateScreen(ctx context.Context, in *UpdateScreenRequest, opts ...grpc.CallOption) (*ScreenResponse, error)
	CreateScreen(ctx context.Context, in *CreateScreenRequest, opts ...grpc.CallOption) (*ScreenResponse, error)
	DeleteScreen(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ScreenResponse, error)
	ListScreens(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScreenResponseRepeated, error)
}

type screenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScreenServiceClient(cc grpc.ClientConnInterface) ScreenServiceClient {
	return &screenServiceClient{cc}
}

func (c *screenServiceClient) GetScreenById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScreenResponse)
	err := c.cc.Invoke(ctx, ScreenService_GetScreenById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenServiceClient) UpdateScreen(ctx context.Context, in *UpdateScreenRequest, opts ...grpc.CallOption) (*ScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScreenResponse)
	err := c.cc.Invoke(ctx, ScreenService_UpdateScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenServiceClient) CreateScreen(ctx context.Context, in *CreateScreenRequest, opts ...grpc.CallOption) (*ScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScreenResponse)
	err := c.cc.Invoke(ctx, ScreenService_CreateScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenServiceClient) DeleteScreen(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScreenResponse)
	err := c.cc.Invoke(ctx, ScreenService_DeleteScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenServiceClient) ListScreens(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScreenResponseRepeated, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScreenResponseRepeated)
	err := c.cc.Invoke(ctx, ScreenService_ListScreens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenServiceServer is the server API for ScreenService service.
// All implementations must embed UnimplementedScreenServiceServer
// for forward compatibility
type ScreenServiceServer interface {
	GetScreenById(context.Context, *ById) (*ScreenResponse, error)
	UpdateScreen(context.Context, *UpdateScreenRequest) (*ScreenResponse, error)
	CreateScreen(context.Context, *CreateScreenRequest) (*ScreenResponse, error)
	DeleteScreen(context.Context, *ById) (*ScreenResponse, error)
	ListScreens(context.Context, *Empty) (*ScreenResponseRepeated, error)
	mustEmbedUnimplementedScreenServiceServer()
}

// UnimplementedScreenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScreenServiceServer struct {
}

func (UnimplementedScreenServiceServer) GetScreenById(context.Context, *ById) (*ScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenById not implemented")
}
func (UnimplementedScreenServiceServer) UpdateScreen(context.Context, *UpdateScreenRequest) (*ScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScreen not implemented")
}
func (UnimplementedScreenServiceServer) CreateScreen(context.Context, *CreateScreenRequest) (*ScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScreen not implemented")
}
func (UnimplementedScreenServiceServer) DeleteScreen(context.Context, *ById) (*ScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScreen not implemented")
}
func (UnimplementedScreenServiceServer) ListScreens(context.Context, *Empty) (*ScreenResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScreens not implemented")
}
func (UnimplementedScreenServiceServer) mustEmbedUnimplementedScreenServiceServer() {}

// UnsafeScreenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScreenServiceServer will
// result in compilation errors.
type UnsafeScreenServiceServer interface {
	mustEmbedUnimplementedScreenServiceServer()
}

func RegisterScreenServiceServer(s grpc.ServiceRegistrar, srv ScreenServiceServer) {
	s.RegisterService(&ScreenService_ServiceDesc, srv)
}

func _ScreenService_GetScreenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenServiceServer).GetScreenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScreenService_GetScreenById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenServiceServer).GetScreenById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenService_UpdateScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenServiceServer).UpdateScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScreenService_UpdateScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenServiceServer).UpdateScreen(ctx, req.(*UpdateScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenService_CreateScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenServiceServer).CreateScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScreenService_CreateScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenServiceServer).CreateScreen(ctx, req.(*CreateScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenService_DeleteScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenServiceServer).DeleteScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScreenService_DeleteScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenServiceServer).DeleteScreen(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenService_ListScreens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenServiceServer).ListScreens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScreenService_ListScreens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenServiceServer).ListScreens(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ScreenService_ServiceDesc is the grpc.ServiceDesc for ScreenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScreenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assesement_test_MicroServices.ScreenService",
	HandlerType: (*ScreenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScreenById",
			Handler:    _ScreenService_GetScreenById_Handler,
		},
		{
			MethodName: "UpdateScreen",
			Handler:    _ScreenService_UpdateScreen_Handler,
		},
		{
			MethodName: "CreateScreen",
			Handler:    _ScreenService_CreateScreen_Handler,
		},
		{
			MethodName: "DeleteScreen",
			Handler:    _ScreenService_DeleteScreen_Handler,
		},
		{
			MethodName: "ListScreens",
			Handler:    _ScreenService_ListScreens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "screen.proto",
}
