// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: office.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OfficeService_GetOfficeById_FullMethodName = "/assesement_test_MicroServices.OfficeService/GetOfficeById"
	OfficeService_UpdateOffice_FullMethodName  = "/assesement_test_MicroServices.OfficeService/UpdateOffice"
	OfficeService_CreateOffice_FullMethodName  = "/assesement_test_MicroServices.OfficeService/CreateOffice"
	OfficeService_DeleteOffice_FullMethodName  = "/assesement_test_MicroServices.OfficeService/DeleteOffice"
	OfficeService_ListOffices_FullMethodName   = "/assesement_test_MicroServices.OfficeService/ListOffices"
)

// OfficeServiceClient is the client API for OfficeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficeServiceClient interface {
	GetOfficeById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*OfficeResponse, error)
	UpdateOffice(ctx context.Context, in *UpdateOfficeRequest, opts ...grpc.CallOption) (*OfficeResponse, error)
	CreateOffice(ctx context.Context, in *CreateOfficeRequest, opts ...grpc.CallOption) (*OfficeResponse, error)
	DeleteOffice(ctx context.Context, in *ById, opts ...grpc.CallOption) (*OfficeResponse, error)
	ListOffices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OfficeResponseRepeated, error)
}

type officeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficeServiceClient(cc grpc.ClientConnInterface) OfficeServiceClient {
	return &officeServiceClient{cc}
}

func (c *officeServiceClient) GetOfficeById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*OfficeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfficeResponse)
	err := c.cc.Invoke(ctx, OfficeService_GetOfficeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) UpdateOffice(ctx context.Context, in *UpdateOfficeRequest, opts ...grpc.CallOption) (*OfficeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfficeResponse)
	err := c.cc.Invoke(ctx, OfficeService_UpdateOffice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) CreateOffice(ctx context.Context, in *CreateOfficeRequest, opts ...grpc.CallOption) (*OfficeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfficeResponse)
	err := c.cc.Invoke(ctx, OfficeService_CreateOffice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) DeleteOffice(ctx context.Context, in *ById, opts ...grpc.CallOption) (*OfficeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfficeResponse)
	err := c.cc.Invoke(ctx, OfficeService_DeleteOffice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) ListOffices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OfficeResponseRepeated, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfficeResponseRepeated)
	err := c.cc.Invoke(ctx, OfficeService_ListOffices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficeServiceServer is the server API for OfficeService service.
// All implementations must embed UnimplementedOfficeServiceServer
// for forward compatibility
type OfficeServiceServer interface {
	GetOfficeById(context.Context, *ById) (*OfficeResponse, error)
	UpdateOffice(context.Context, *UpdateOfficeRequest) (*OfficeResponse, error)
	CreateOffice(context.Context, *CreateOfficeRequest) (*OfficeResponse, error)
	DeleteOffice(context.Context, *ById) (*OfficeResponse, error)
	ListOffices(context.Context, *Empty) (*OfficeResponseRepeated, error)
	mustEmbedUnimplementedOfficeServiceServer()
}

// UnimplementedOfficeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOfficeServiceServer struct {
}

func (UnimplementedOfficeServiceServer) GetOfficeById(context.Context, *ById) (*OfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficeById not implemented")
}
func (UnimplementedOfficeServiceServer) UpdateOffice(context.Context, *UpdateOfficeRequest) (*OfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffice not implemented")
}
func (UnimplementedOfficeServiceServer) CreateOffice(context.Context, *CreateOfficeRequest) (*OfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffice not implemented")
}
func (UnimplementedOfficeServiceServer) DeleteOffice(context.Context, *ById) (*OfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOffice not implemented")
}
func (UnimplementedOfficeServiceServer) ListOffices(context.Context, *Empty) (*OfficeResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOffices not implemented")
}
func (UnimplementedOfficeServiceServer) mustEmbedUnimplementedOfficeServiceServer() {}

// UnsafeOfficeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficeServiceServer will
// result in compilation errors.
type UnsafeOfficeServiceServer interface {
	mustEmbedUnimplementedOfficeServiceServer()
}

func RegisterOfficeServiceServer(s grpc.ServiceRegistrar, srv OfficeServiceServer) {
	s.RegisterService(&OfficeService_ServiceDesc, srv)
}

func _OfficeService_GetOfficeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).GetOfficeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_GetOfficeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).GetOfficeById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_UpdateOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).UpdateOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_UpdateOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).UpdateOffice(ctx, req.(*UpdateOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_CreateOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).CreateOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_CreateOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).CreateOffice(ctx, req.(*CreateOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_DeleteOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).DeleteOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_DeleteOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).DeleteOffice(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_ListOffices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).ListOffices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_ListOffices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).ListOffices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OfficeService_ServiceDesc is the grpc.ServiceDesc for OfficeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfficeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assesement_test_MicroServices.OfficeService",
	HandlerType: (*OfficeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOfficeById",
			Handler:    _OfficeService_GetOfficeById_Handler,
		},
		{
			MethodName: "UpdateOffice",
			Handler:    _OfficeService_UpdateOffice_Handler,
		},
		{
			MethodName: "CreateOffice",
			Handler:    _OfficeService_CreateOffice_Handler,
		},
		{
			MethodName: "DeleteOffice",
			Handler:    _OfficeService_DeleteOffice_Handler,
		},
		{
			MethodName: "ListOffices",
			Handler:    _OfficeService_ListOffices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "office.proto",
}
